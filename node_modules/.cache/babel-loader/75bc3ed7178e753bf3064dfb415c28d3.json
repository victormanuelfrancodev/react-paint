{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.track = exports.getFormStateKey = exports.getForm = exports.getField = exports.form = exports.batched = exports.modeled = exports.createFieldClass = exports.Fieldset = exports.Errors = exports.Form = exports.Control = exports.Field = exports.controls = exports.actionTypes = exports.actions = exports.initialFieldState = exports.createForms = exports.combineForms = exports.modelReducer = exports.formReducer = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _modelReducer = require('./reducers/model-reducer');\n\nvar _formReducer = require('./reducers/form-reducer');\n\nvar _formReducer2 = _interopRequireDefault(_formReducer);\n\nvar _modeledEnhancer = require('./enhancers/modeled-enhancer');\n\nvar _modelActions = require('./actions/model-actions');\n\nvar _controlPropsMap = require('./constants/control-props-map');\n\nvar _controlPropsMap2 = _interopRequireDefault(_controlPropsMap);\n\nvar _formsReducer = require('./reducers/forms-reducer');\n\nvar _errorsComponent = require('./components/errors-component');\n\nvar _controlComponent = require('./components/control-component');\n\nvar _formComponent = require('./components/form-component');\n\nvar _fieldActions = require('./actions/field-actions');\n\nvar _track = require('./utils/track');\n\nvar _fieldsetComponent = require('./components/fieldset-component');\n\nvar _fieldsetComponent2 = _interopRequireDefault(_fieldsetComponent);\n\nvar _batchActions = require('./actions/batch-actions');\n\nvar _batchActions2 = _interopRequireDefault(_batchActions);\n\nvar _getValue = require('./utils/get-value');\n\nvar _getValue2 = _interopRequireDefault(_getValue);\n\nvar _getFromImmutableState = require('./utils/get-from-immutable-state');\n\nvar _getFromImmutableState2 = _interopRequireDefault(_getFromImmutableState);\n\nvar _getForm = require('./utils/get-form');\n\nvar _getForm2 = _interopRequireDefault(_getForm);\n\nvar _isPlainObject = require('./utils/is-plain-object');\n\nvar _isPlainObject2 = _interopRequireDefault(_isPlainObject);\n\nvar _findKeyImmutable = require('./utils/find-key-immutable');\n\nvar _findKeyImmutable2 = _interopRequireDefault(_findKeyImmutable);\n\nvar _immutable = require('immutable');\n\nvar _immutable2 = _interopRequireDefault(_immutable);\n\nvar _reactDom = require('react-dom');\n\nvar _index = require('./index');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction immutableSet(state, path, value) {\n  try {\n    return state.setIn(path, value);\n  } catch (error) {\n    throw new Error('Unable to set path \\'' + path.join('.') + '\\' in state. Please make sure that state is an Immutable instance.');\n  }\n}\n\nfunction immutableKeys(state) {\n  if (_immutable2.default.Map.isMap(state)) {\n    return state.keySeq();\n  }\n\n  return Object.keys(state);\n}\n\nvar baseStrategy = {\n  get: _getFromImmutableState2.default,\n  set: immutableSet,\n  getValue: _getValue2.default,\n  keys: immutableKeys,\n  splice: function splice(list) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return list.splice.apply(list, args);\n  },\n  merge: function merge(map) {\n    for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    return map.merge.apply(map, args);\n  },\n  remove: function remove(map) {\n    for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n\n    return map.remove.apply(map, args);\n  },\n  push: function push(list) {\n    for (var _len4 = arguments.length, args = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n      args[_key4 - 1] = arguments[_key4];\n    }\n\n    return list.push.apply(list, args);\n  },\n  length: function length(list) {\n    return list.size;\n  },\n  object: new _immutable2.default.Map(),\n  array: new _immutable2.default.List(),\n  isObject: function isObject(state) {\n    return (0, _isPlainObject2.default)(state) || _immutable2.default.Map.isMap(state);\n  }\n};\n\nfunction immutableGetForm(state, modelString) {\n  return (0, _getForm2.default)(state, modelString, baseStrategy);\n}\n\nfunction immutableGetFormStateKey(state, model) {\n  return (0, _getForm.getFormStateKey)(state, model, baseStrategy);\n}\n\nfunction immutableGetFieldFromState(state, modelString) {\n  return (0, _index.getField)(state, modelString, {\n    getForm: immutableGetForm\n  });\n}\n\nvar immutableStrategy = _extends({}, baseStrategy, {\n  getForm: immutableGetForm,\n  getFieldFromState: immutableGetFieldFromState,\n  findKey: _findKeyImmutable2.default\n});\n\nfunction transformAction(action) {\n  if (action.value && action.value.toJS) {\n    return _extends({}, action, {\n      value: action.value.toJS()\n    });\n  }\n\n  if (action.actions) {\n    return _extends({}, action, {\n      actions: action.actions.map(transformAction)\n    });\n  }\n\n  return action;\n}\n\nfunction immutableFormReducer(model) {\n  var initialState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new _immutable2.default.Map();\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var _initialState = initialState && initialState.toJS ? initialState.toJS() : initialState;\n\n  return (0, _formReducer2.default)(model, _initialState, _extends({}, options, {\n    transformAction: transformAction\n  }));\n}\n\nvar immutableModelActions = (0, _modelActions.createModelActions)(immutableStrategy);\nvar immutableFieldActions = (0, _fieldActions.createFieldActions)(immutableStrategy);\n\nvar immutableActions = _extends({}, immutableModelActions, immutableFieldActions, {\n  batch: _batchActions2.default\n});\n\nvar immutableModelReducer = (0, _modelReducer.createModeler)(immutableStrategy);\nvar immutableModelReducerEnhancer = (0, _modeledEnhancer.createModelReducerEnhancer)(immutableModelReducer);\nvar ImmutableControl = (0, _controlComponent.createControlClass)({\n  get: _getFromImmutableState2.default,\n  getFieldFromState: immutableGetFieldFromState,\n  actions: immutableModelActions,\n  findDOMNode: _reactDom.findDOMNode\n});\nvar ImmutableField = (0, _index.createFieldClass)(_controlPropsMap2.default, {\n  Control: ImmutableControl,\n  getter: _getFromImmutableState2.default,\n  getFieldFromState: immutableGetFieldFromState,\n  changeAction: immutableModelActions.change,\n  actions: immutableModelActions\n});\nvar ImmutableErrors = (0, _errorsComponent.createErrorsClass)(immutableStrategy);\nvar ImmutableForm = (0, _formComponent.createFormClass)(_extends({}, immutableStrategy, {\n  actions: immutableActions\n}));\nvar immutableFormCombiner = (0, _formsReducer.createFormCombiner)({\n  modelReducer: immutableModelReducer,\n  formReducer: immutableFormReducer,\n  modeled: immutableModelReducerEnhancer,\n  toJS: function toJS(val) {\n    return val && val.toJS ? val.toJS() : val;\n  }\n});\nvar immutableCombineForms = immutableFormCombiner.combineForms;\nvar immutableCreateForms = immutableFormCombiner.createForms;\nvar immutableTrack = (0, _track.createTrack)(immutableStrategy);\nexports.formReducer = immutableFormReducer;\nexports.modelReducer = immutableModelReducer;\nexports.combineForms = immutableCombineForms;\nexports.createForms = immutableCreateForms;\nexports.initialFieldState = _index.initialFieldState;\nexports.actions = immutableActions;\nexports.actionTypes = _index.actionTypes;\nexports.controls = _controlPropsMap2.default;\nexports.Field = ImmutableField;\nexports.Control = ImmutableControl;\nexports.Form = ImmutableForm;\nexports.Errors = ImmutableErrors;\nexports.Fieldset = _fieldsetComponent2.default;\nexports.createFieldClass = _index.createFieldClass;\nexports.modeled = immutableModelReducerEnhancer;\nexports.batched = _index.batched;\nexports.form = _index.form;\nexports.getField = immutableGetFieldFromState;\nexports.getForm = immutableGetForm;\nexports.getFormStateKey = immutableGetFormStateKey;\nexports.track = immutableTrack;","map":null,"metadata":{},"sourceType":"script"}