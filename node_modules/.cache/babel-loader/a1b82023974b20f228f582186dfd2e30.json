{"ast":null,"code":"import _classCallCheck from \"/Users/victor/Documents/GitHub/react-paint/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/victor/Documents/GitHub/react-paint/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/victor/Documents/GitHub/react-paint/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/victor/Documents/GitHub/react-paint/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/victor/Documents/GitHub/react-paint/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/victor/Documents/GitHub/react-paint/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/victor/Documents/GitHub/react-paint/src/componentes/DrawArea.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nvar DrawArea =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DrawArea, _React$Component);\n\n  function DrawArea() {\n    var _this;\n\n    _classCallCheck(this, DrawArea);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DrawArea).call(this));\n    _this.state = {\n      lines: new Immutable.List(),\n      isDrawing: false\n    };\n    _this.handleMouseDown = _this.handleMouseDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleMouseMove = _this.handleMouseMove.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleMouseUp = _this.handleMouseUp.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(DrawArea, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.addEventListener(\"mouseup\", this.handleMouseUp);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.removeEventListener(\"mouseup\", this.handleMouseUp);\n    }\n  }, {\n    key: \"handleMouseDown\",\n    value: function handleMouseDown(mouseEvent) {\n      if (mouseEvent.button != 0) {\n        return;\n      }\n\n      var point = this.relativeCoordinatesForEvent(mouseEvent);\n      this.setState(function (prevState) {\n        return {\n          lines: prevState.lines.push(new Immutable.List([point])),\n          isDrawing: true\n        };\n      });\n    }\n  }, {\n    key: \"handleMouseMove\",\n    value: function handleMouseMove(mouseEvent) {\n      if (!this.state.isDrawing) {\n        return;\n      }\n\n      var point = this.relativeCoordinatesForEvent(mouseEvent);\n      this.setState(function (prevState) {\n        return {\n          lines: prevState.lines.updateIn([prevState.lines.size - 1], function (line) {\n            return line.push(point);\n          })\n        };\n      });\n    }\n  }, {\n    key: \"handleMouseUp\",\n    value: function handleMouseUp() {\n      this.setState({\n        isDrawing: false\n      });\n    }\n  }, {\n    key: \"relativeCoordinatesForEvent\",\n    value: function relativeCoordinatesForEvent(mouseEvent) {\n      var boundingRect = this.refs.drawArea.getBoundingClientRect();\n      return new Immutable.Map({\n        x: mouseEvent.clientX - boundingRect.left,\n        y: mouseEvent.clientY - boundingRect.top\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"drawArea\",\n        ref: \"drawArea\",\n        onMouseDown: this.handleMouseDown,\n        onMouseMove: this.handleMouseMove,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(Drawing, {\n        lines: this.state.lines,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return DrawArea;\n}(React.Component);\n\nfunction Drawing(_ref) {\n  var lines = _ref.lines;\n  return React.createElement(\"svg\", {\n    className: \"drawing\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, lines.map(function (line, index) {\n    return React.createElement(DrawingLine, {\n      key: index,\n      line: line,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    });\n  }));\n}\n\nfunction DrawingLine(_ref2) {\n  var line = _ref2.line;\n  var pathData = \"M \" + line.map(function (p) {\n    return \"\".concat(p.get('x'), \" \").concat(p.get('y'));\n  }).join(\" L \");\n  return React.createElement(\"path\", {\n    className: \"path\",\n    d: pathData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  });\n}\n\nReactDOM.render(React.createElement(DrawArea, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 98\n  },\n  __self: this\n}), document.getElementById(\"container\"));","map":{"version":3,"sources":["/Users/victor/Documents/GitHub/react-paint/src/componentes/DrawArea.js"],"names":["React","Component","ReactDOM","DrawArea","state","lines","Immutable","List","isDrawing","handleMouseDown","bind","handleMouseMove","handleMouseUp","document","addEventListener","removeEventListener","mouseEvent","button","point","relativeCoordinatesForEvent","setState","prevState","push","updateIn","size","line","boundingRect","refs","drawArea","getBoundingClientRect","Map","x","clientX","left","y","clientY","top","Drawing","map","index","DrawingLine","pathData","p","get","join","render","getElementById"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nclass DrawArea extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      lines: new Immutable.List(),\n      isDrawing: false\n    };\n\n    this.handleMouseDown = this.handleMouseDown.bind(this);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.handleMouseUp = this.handleMouseUp.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"mouseup\", this.handleMouseUp);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"mouseup\", this.handleMouseUp);\n  }\n\n  handleMouseDown(mouseEvent) {\n    if (mouseEvent.button != 0) {\n      return;\n    }\n\n    const point = this.relativeCoordinatesForEvent(mouseEvent);\n\n    this.setState(prevState => ({\n      lines: prevState.lines.push(new Immutable.List([point])),\n      isDrawing: true\n    }));\n  }\n\n  handleMouseMove(mouseEvent) {\n    if (!this.state.isDrawing) {\n      return;\n    }\n\n    const point = this.relativeCoordinatesForEvent(mouseEvent);\n\n    this.setState(prevState =>  ({\n      lines: prevState.lines.updateIn([prevState.lines.size - 1], line => line.push(point))\n    }));\n  }\n\n  handleMouseUp() {\n    this.setState({ isDrawing: false });\n  }\n\n  relativeCoordinatesForEvent(mouseEvent) {\n    const boundingRect = this.refs.drawArea.getBoundingClientRect();\n    return new Immutable.Map({\n      x: mouseEvent.clientX - boundingRect.left,\n      y: mouseEvent.clientY - boundingRect.top,\n    });\n  }\n\n  render() {\n    return (\n      <div\n        className=\"drawArea\"\n        ref=\"drawArea\"\n        onMouseDown={this.handleMouseDown}\n        onMouseMove={this.handleMouseMove}\n      >\n        <Drawing lines={this.state.lines} />\n      </div>\n    );\n  }\n}\n\nfunction Drawing({ lines }) {\n  return (\n    <svg className=\"drawing\">\n      {lines.map((line, index) => (\n        <DrawingLine key={index} line={line} />\n      ))}\n    </svg>\n  );\n}\n\nfunction DrawingLine({ line }) {\n  const pathData = \"M \" +\n    line\n      .map(p => {\n        return `${p.get('x')} ${p.get('y')}`;\n      })\n      .join(\" L \");\n\n  return <path className=\"path\" d={pathData} />;\n}\n\nReactDOM.render(<DrawArea />, document.getElementById(\"container\"));\n"]},"metadata":{},"sourceType":"module"}