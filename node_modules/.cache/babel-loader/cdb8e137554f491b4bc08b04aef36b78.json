{"ast":null,"code":"import _classCallCheck from \"/Users/victor/Documents/GitHub/konvastest/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/victor/Documents/GitHub/konvastest/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/victor/Documents/GitHub/konvastest/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/victor/Documents/GitHub/konvastest/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/victor/Documents/GitHub/konvastest/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/victor/Documents/GitHub/konvastest/src/componentes/TransformerComponent.js\";\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport { Stage, Layer, Rect, Transformer } from 'react-konva';\n\nvar TransformerComponent =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TransformerComponent, _Component);\n\n  function TransformerComponent() {\n    _classCallCheck(this, TransformerComponent);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TransformerComponent).apply(this, arguments));\n  }\n\n  _createClass(TransformerComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.checkNode();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      //  this.checkNode();\n      if (this.props.selectedShapeName.trim() !== \"\") {\n        this.checkNode();\n      } else {\n        this.transformer.detach();\n      }\n\n      console.log(\"texto\" + this.props.selectedShapeName);\n    }\n  }, {\n    key: \"checkNode\",\n    value: function checkNode() {\n      // here we need to manually attach or detach Transformer node\n      var stage = this.transformer.getStage(); //const { selectedShapeName } = this.props;\n\n      var selectedShape = this.props.selectedShapeName;\n      var selectedNode = stage.findOne(\".\" + selectedShape); // do nothing if selected node is already attached\n\n      if (selectedNode === this.transformer.node()) {\n        return;\n      }\n\n      if (selectedNode) {\n        // attach to another node\n        this.transformer.attachTo(selectedNode);\n      } else {\n        // remove transformer\n        this.transformer.detach();\n      }\n\n      this.transformer.getLayer().batchDraw();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return React.createElement(Transformer, {\n        ref: function ref(node) {\n          _this.transformer = node;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return TransformerComponent;\n}(Component);\n\nexport default TransformerComponent;","map":{"version":3,"sources":["/Users/victor/Documents/GitHub/konvastest/src/componentes/TransformerComponent.js"],"names":["React","Component","render","Stage","Layer","Rect","Transformer","TransformerComponent","checkNode","props","selectedShapeName","trim","transformer","detach","console","log","stage","getStage","selectedShape","selectedNode","findOne","node","attachTo","getLayer","batchDraw"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,IAAvB,EAA6BC,WAA7B,QAAgD,aAAhD;;IAEMC,oB;;;;;;;;;;;;;wCACgB;AAClB,WAAKC,SAAL;AACD;;;yCACoB;AACrB;AACE,UAAI,KAAKC,KAAL,CAAWC,iBAAX,CAA6BC,IAA7B,OAAwC,EAA5C,EAAgD;AAC9C,aAAKH,SAAL;AACD,OAFD,MAEK;AACH,aAAKI,WAAL,CAAiBC,MAAjB;AACD;;AAEFC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAS,KAAKN,KAAL,CAAWC,iBAAhC;AACA;;;gCAEW;AACV;AACA,UAAMM,KAAK,GAAG,KAAKJ,WAAL,CAAiBK,QAAjB,EAAd,CAFU,CAGV;;AAEA,UAAMC,aAAa,GAAI,KAAKT,KAAL,CAAWC,iBAAlC;AACA,UAAMS,YAAY,GAAGH,KAAK,CAACI,OAAN,CAAc,MAAIF,aAAlB,CAArB,CANU,CAOV;;AACA,UAAIC,YAAY,KAAK,KAAKP,WAAL,CAAiBS,IAAjB,EAArB,EAA8C;AAC5C;AACD;;AAED,UAAIF,YAAJ,EAAkB;AAChB;AACA,aAAKP,WAAL,CAAiBU,QAAjB,CAA0BH,YAA1B;AACD,OAHD,MAGO;AACL;AACA,aAAKP,WAAL,CAAiBC,MAAjB;AACD;;AACD,WAAKD,WAAL,CAAiBW,QAAjB,GAA4BC,SAA5B;AACD;;;6BAEQ;AAAA;;AACP,aACE,oBAAC,WAAD;AACE,QAAA,GAAG,EAAE,aAAAH,IAAI,EAAI;AACX,UAAA,KAAI,CAACT,WAAL,GAAmBS,IAAnB;AACD,SAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAOD;;;;EA7CgCpB,S;;AAgDnC,eAAeM,oBAAf","sourcesContent":["import React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport { Stage, Layer, Rect, Transformer } from 'react-konva';\n\nclass TransformerComponent extends Component {\n  componentDidMount() {\n    this.checkNode();\n  }\n  componentDidUpdate() {\n  //  this.checkNode();\n    if (this.props.selectedShapeName.trim() !== \"\") {\n      this.checkNode()\n    }else{\n      this.transformer.detach();\n    }\n\n   console.log(\"texto\"+ this.props.selectedShapeName);\n  }\n\n  checkNode() {\n    // here we need to manually attach or detach Transformer node\n    const stage = this.transformer.getStage();\n    //const { selectedShapeName } = this.props;\n\n    const selectedShape =  this.props.selectedShapeName;\n    const selectedNode = stage.findOne(\".\"+selectedShape);\n    // do nothing if selected node is already attached\n    if (selectedNode === this.transformer.node()) {\n      return;\n    }\n\n    if (selectedNode) {\n      // attach to another node\n      this.transformer.attachTo(selectedNode);\n    } else {\n      // remove transformer\n      this.transformer.detach();\n    }\n    this.transformer.getLayer().batchDraw();\n  }\n\n  render() {\n    return (\n      <Transformer\n        ref={node => {\n          this.transformer = node;\n        }}\n      />\n    );\n  }\n}\n\nexport default TransformerComponent;\n"]},"metadata":{},"sourceType":"module"}